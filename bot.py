import os
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
import instaloader
import asyncio

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env ---
load_dotenv(dotenv_path=Path(__file__).parent / ".env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env!")

IG_USERNAME = os.getenv("IG_USERNAME")
IG_PASSWORD = os.getenv("IG_PASSWORD")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Instaloader ---
L = instaloader.Instaloader()
if IG_USERNAME and IG_PASSWORD:
    try:
        L.login(IG_USERNAME, IG_PASSWORD)
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –≤ Instagram: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def extract_shortcode(url: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç shortcode –∏–∑ —Å—Å—ã–ª–∫–∏ Instagram –ø–æ—Å—Ç–∞."""
    if "/p/" in url:
        return url.split("/p/")[1].split("/")[0]
    if "/reel/" in url:
        return url.split("/reel/")[1].split("/")[0]
    if "/tv/" in url:
        return url.split("/tv/")[1].split("/")[0]
    return None

# --- /start ---
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram –ø–æ—Å—Ç, —Ñ–æ—Ç–æ, –∫–∞—Ä—É—Å–µ–ª—å –∏–ª–∏ Reels ‚Äî —è –∑–∞–≥—Ä—É–∂—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö —Å—é–¥–∞."
    )

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Instagram —Å—Å—ã–ª–æ–∫ ---
@dp.message(F.text.startswith("https://www.instagram.com/"))
async def download_instagram_post(message: Message):
    url = message.text.strip()
    shortcode = extract_shortcode(url)
    if not shortcode:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É ‚ùå")
        return

    try:
        post = instaloader.Post.from_shortcode(L.context, shortcode)

        sent_any = False

        # –ï—Å–ª–∏ –ø–æ—Å—Ç ‚Äî –∫–∞—Ä—É—Å–µ–ª—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
        if post.typename == "GraphSidecar":
            for node in post.get_sidecar_nodes():
                if node.is_video:
                    await message.reply_video(video=node.video_url)
                else:
                    await message.reply_photo(photo=node.display_url)
                sent_any = True
        else:
            # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
            if post.is_video:
                await message.reply_video(video=post.video_url)
            else:
                await message.reply_photo(photo=post.url)
            sent_any = True

        if sent_any:
            await message.reply("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª ‚ùå")

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
